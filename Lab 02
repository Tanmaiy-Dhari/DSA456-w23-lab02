echo "# DSA456-w23-lab02" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Tanmaiy-Dhari/DSA456-w23-lab02.git
git push -u origin main

# Lab 2
Name - Tanmaiy Dhari
Email - tdhari1@myseneca.ca
Section - DSA456 ZDD
Student No - 130491210

### function 1:

Analyze the following function with respect to number

let n represent the number being passed to function1

let T(n) represent the number of operations done by function 1 given n as the value for number 

python
def function1(number):
	total=0;					# 1

	for i in range(0,number):	# (n-1) + 1
									# n-1 for iterations
									# 1 for condition check
		x = (i+1)				# 2(n-1)
									# multiplied by 2 because there are two operations happening - "=" and "+"
		total+=(x*x)			# 3(n-1)
									# multiplied by 3 because there are three operators.
	return total				# 1


T(n)= 1 + (n-1) + 1 + 2(n-1) + 3(n-1) + 1
	= 3 + 6(n-1)
	= 3 + 6n - 6
	= 6n - 3

Therefore, T(n) is O(n)


### function 2:

Analyze the following function with respect to number

let n represent the number being passed to function2

let T(n) represent the number of operations done by function 2 given n as the value for number 

python
def function2(number):
	return  ((number)*(number+1)*(2*number + 1))/6	# 1 for return 
													# 6 because 6 operations are happening in there.



T(n) = 1+6
     = 7

Therefore, T(n) = O(1)

### function 3:

Analyze the following with respect to the length of the list.  Note that the function call len() which returns the length of the list is constant (O(1)) with respect to the length of the list.

let T(n) represent the number of operations done by function 3 given n as the value for number

python

def function3(list):
	for i in range (0,len(list)-1):			# 1 because len() function takes O(1) times and it returns a constant
		for j in range(0,len(list)-1-i):	# 1 because len() function takes O(1) to return length
			if(list[j]>list[j+1]):			# 2
				tmp=list[j]					# 1+1
												#1 for = operator
												#1 to access list item 
				list[j]=list[j+1]			# 2 + 2
												# 2 for operators
												# 2 for accessing list items
				list[j+1]=tmp				# 2 + 1
												# 2 for operators
												# 1 to access list item


T(n) = 1 + 1 + 2 + 1+1 + 2 + 2 + 2 + 1
	 = 13

Therefore, T(n) = O(1)

### function 4:

Analyze the following function with respect to number

let n represent the number being passed to function4

let T(n) represent the number of operations done by function 4 given n as the value for number 

python
def function4(number):
	total=1								# 1
	for i in range(1 to number):		# n-1 + 1
											# the (n-1) is for number of loop iterations
											# the + 1 is for range
				
		total=total*(i+1)				# 2(n-1)
											# the 2 is for the two ops (*= and +)
	return total						# 1

T(n) = 1 + n-1 + 1 + 2(n-1) + 1
	 = 3 + 3(n-1)
	 = 3(1+n-1)
	 = 3n

Therefore T(n) is O(n)
